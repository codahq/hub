/**
 * Copyright (c) 2021 by the respective copyright holders.
 * All rights reserved.
 * <p>
 * This file is part of Parrot Home Automation Hub.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.parrotha.zwave;

import groovy.lang.GroovyObjectSupport;
import org.apache.commons.lang3.StringUtils;
import com.parrotha.internal.utils.HexUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * Note: This code is autogenerated, changes will be overwritten.
 */
public class Zwave extends GroovyObjectSupport {
    private static final Logger logger = LoggerFactory.getLogger(com.parrotha.zwave.Zwave.class);

    public Command parse(String description, Map commandVersions) {
        String[] descriptionArray = description.split(",");
        if (descriptionArray.length == 3) {
            String payloadString = descriptionArray[2].substring("payload: ".length()).trim();
            if (descriptionArray[1].trim().startsWith("command:")) {
                String command = descriptionArray[1].trim().substring("command: ".length()).trim();
                ZWaveCommandEnum zWaveCommand = ZWaveCommandEnum.getZWaveClass(command);
                if (zWaveCommand != null) {
                    try {
                        int version = zWaveCommand.getMaxVersion();
                        if (commandVersions.containsKey(zWaveCommand.getCommandClass()))
                            version = (int) commandVersions.get(zWaveCommand.getCommandClass());
                        Class<? extends Command> commandClazz = Class.forName("com.parrotha.zwave.commands." + zWaveCommand.getPackageName() + "v" + version + "." + zWaveCommand.getClassName()).asSubclass(Command.class);
                        Command cmd = commandClazz.getDeclaredConstructor().newInstance();
                        if (StringUtils.isNotBlank(payloadString)) {
                            cmd.setPayload(hexStringToShortList(payloadString));
                        }
                        return cmd;
                    } catch (ClassNotFoundException classNotFoundException) {
                        classNotFoundException.printStackTrace();
                    } catch (InstantiationException instantiationException) {
                        instantiationException.printStackTrace();
                    } catch (InvocationTargetException e) {
                        e.printStackTrace();
                    } catch (NoSuchMethodException e) {
                        e.printStackTrace();
                    } catch (IllegalAccessException illegalAccessException) {
                        illegalAccessException.printStackTrace();
                    }
                }
            }
        }
        return null;
    }

    private static List<Short> hexStringToShortList(String hexString) {
        List<Short> shortList = Arrays.stream(HexUtils.hexStringToIntArray(hexString)).mapToObj(s -> Short.valueOf((short) s)).collect(Collectors.toList());
        return shortList;
    }

    @Override
    public Object getProperty(String propertyName) {
        try {
            Class<?> clazz = Class.forName("com.parrotha.zwave.commandclasses." + StringUtils.capitalize(propertyName));
            return clazz.getDeclaredConstructor().newInstance();
        } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException e) {
            logger.warn("Exception while loading Z-Wave class, may not be implemented.", e);
        }

        return null;
    }
}
