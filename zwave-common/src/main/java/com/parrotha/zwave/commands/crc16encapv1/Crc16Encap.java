/**
 * Copyright (c) 2021 by the respective copyright holders.
 * All rights reserved.
 * <p>
 * This file is part of Parrot Home Automation Hub.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.parrotha.zwave.commands.crc16encapv1;

import com.parrotha.zwave.Command;

import com.parrotha.internal.utils.HexUtils;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Note: This code is autogenerated, changes will be overwritten.
 */
public class Crc16Encap extends Command {
    public String getCMD() {
        return "5601";
    }

    private Short commandClass = 0;
    private Short command = 0;
    private List<Short> data;
    private Integer checksum = 0;

    public Short getCommandClass() {
        return commandClass;
    }

    public void setCommandClass(Short commandClass) {
        this.commandClass = commandClass;
    }

    public Short getCommand() {
        return command;
    }

    public void setCommand(Short command) {
        this.command = command;
    }

    public List<Short> getData() {
        return data;
    }

    public void setData(List<Short> data) {
        this.data = data;
    }

    public Integer getChecksum() {
        return checksum;
    }

    public void setChecksum(Integer checksum) {
        this.checksum = checksum;
    }

    public List<Short> getPayload() {
        List<Short> retList = Stream.of(commandClass, command).collect(Collectors.toList());
        retList.addAll(data);
        retList.addAll(HexUtils.integerToShortList(checksum, 2));
        return retList;
    }

    public void setPayload(List<Short> payload) {
        if (payload == null) return;
        if (payload.size() > 0) {
            commandClass = payload.get(0);
        }
        if (payload.size() > 1) {
            command = payload.get(1);
        }
        if (payload.size() > 4) {
            data = payload.subList(2, (payload.size() - 3));
        }
        if (payload.size() > 3) {
            checksum = HexUtils.shortListToInteger(payload.subList((payload.size() - 2), (payload.size() - 1)));
        }
    }

    @Override
    public String toString() {
        return "Crc16Encap(" +
                "commandClass: " + commandClass +
                ", command: " + command +
                ", data: " + data +
                ", checksum: " + checksum +
                ')';
    }
}
