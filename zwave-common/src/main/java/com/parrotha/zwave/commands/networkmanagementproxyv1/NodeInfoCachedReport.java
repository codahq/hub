/**
 * Copyright (c) 2021-2023 by the respective copyright holders.
 * All rights reserved.
 * <p>
 * This file is part of Parrot Home Automation Hub.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.parrotha.zwave.commands.networkmanagementproxyv1;

import com.parrotha.zwave.Command;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Note: This code is autogenerated, changes will be overwritten.
 */
public class NodeInfoCachedReport extends Command {
    public static final Short STATUS_OK = 0;
    public static final Short STATUS_NOT_RESPONDING = 1;
    public static final Short STATUS_UNKNOWN = 2;

    public String getCMD() {
        return "5204";
    }

    private Short seqNo = 0;
    private Short status = 0;
    private Short age = 0;
    private Boolean listening = false;
    private Short capability = 0;
    private Boolean opt = false;
    private Short security = 0;
    private Short basicDeviceClass = 0;
    private Short genericDeviceClass = 0;
    private Short specificDeviceClass = 0;
    private List<Short> commandClass;

    public Short getSeqNo() {
        return seqNo;
    }

    public void setSeqNo(Short seqNo) {
        this.seqNo = seqNo;
    }

    public Short getStatus() {
        return status;
    }

    public void setStatus(Short status) {
        this.status = status;
    }

    public Short getAge() {
        return age;
    }

    public void setAge(Short age) {
        this.age = age;
    }

    public Boolean getListening() {
        return listening;
    }

    public void setListening(Boolean listening) {
        this.listening = listening;
    }

    public Short getCapability() {
        return capability;
    }

    public void setCapability(Short capability) {
        this.capability = capability;
    }

    public Boolean getOpt() {
        return opt;
    }

    public void setOpt(Boolean opt) {
        this.opt = opt;
    }

    public Short getSecurity() {
        return security;
    }

    public void setSecurity(Short security) {
        this.security = security;
    }

    public Short getBasicDeviceClass() {
        return basicDeviceClass;
    }

    public void setBasicDeviceClass(Short basicDeviceClass) {
        this.basicDeviceClass = basicDeviceClass;
    }

    public Short getGenericDeviceClass() {
        return genericDeviceClass;
    }

    public void setGenericDeviceClass(Short genericDeviceClass) {
        this.genericDeviceClass = genericDeviceClass;
    }

    public Short getSpecificDeviceClass() {
        return specificDeviceClass;
    }

    public void setSpecificDeviceClass(Short specificDeviceClass) {
        this.specificDeviceClass = specificDeviceClass;
    }

    public List<Short> getCommandClass() {
        return commandClass;
    }

    public void setCommandClass(List<Short> commandClass) {
        this.commandClass = commandClass;
    }

    public List<Short> getPayload() {
        Short data1 = (short) (((status & 15) << 4) | 
                (age & 15));
        Short data2 = (short) ((listening == true ? (1 << 7) : 0) | 
                (capability & 15));
        Short data3 = (short) ((opt == true ? (1 << 7) : 0) | 
                (security & 15));

        List<Short> retList = Stream.of(seqNo, data1, data2, data3, (short) 0, basicDeviceClass, genericDeviceClass, specificDeviceClass).collect(Collectors.toList());
        retList.addAll(commandClass);
        return retList;
    }

    public void setPayload(List<Short> payload) {
        if (payload == null) return;
        if (payload.size() > 0) {
            seqNo = payload.get(0);
        }
        if (payload.size() > 1) {
            status = (short) ((payload.get(1) & 240) >> 4);
            age = (short) (payload.get(1) & 15);
        }
        if (payload.size() > 2) {
            listening = ((payload.get(2) >> 7) & 1) == 1;
            capability = (short) (payload.get(2) & 15);
        }
        if (payload.size() > 3) {
            opt = ((payload.get(3) >> 7) & 1) == 1;
            security = (short) (payload.get(3) & 15);
        }
        if (payload.size() > 5) {
            basicDeviceClass = payload.get(5);
        }
        if (payload.size() > 6) {
            genericDeviceClass = payload.get(6);
        }
        if (payload.size() > 7) {
            specificDeviceClass = payload.get(7);
        }
        if (payload.size() > 8) {
            commandClass = payload.subList(8, (payload.size() - 1));
        }
    }

    @Override
    public String toString() {
        return "NodeInfoCachedReport(" +
                "seqNo: " + seqNo +
                ", status: " + status +
                ", age: " + age +
                ", listening: " + listening +
                ", capability: " + capability +
                ", opt: " + opt +
                ", security: " + security +
                ", basicDeviceClass: " + basicDeviceClass +
                ", genericDeviceClass: " + genericDeviceClass +
                ", specificDeviceClass: " + specificDeviceClass +
                ", commandClass: " + commandClass +
                ')';
    }
}
