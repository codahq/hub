/**
 * Copyright (c) 2021-2022 by the respective copyright holders.
 * All rights reserved.
 * <p>
 * This file is part of Parrot Home Automation Hub.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.parrotha.zwave.commands.securityv1;

import com.parrotha.zwave.Command;

import java.util.ArrayList;
import java.util.List;

/**
 * This is a manually coded class, it is NOT autogenerated.
 */
public class SecurityCommandsSupportedReport extends Command {
    public String getCMD() {
        return "9803";
    }

    private Short reportsToFollow = 0;
    private List<Short> commandClassSupport;
    private List<Short> commandClassControl;

    public Short getReportsToFollow() {
        return reportsToFollow;
    }

    public void setReportsToFollow(Short reportsToFollow) {
        this.reportsToFollow = reportsToFollow;
    }

    public List<Short> getCommandClassSupport() {
        return commandClassSupport;
    }

    public void setCommandClassSupport(List<Short> commandClassSupport) {
        this.commandClassSupport = commandClassSupport;
    }

    public List<Short> getCommandClassControl() {
        return commandClassControl;
    }

    public void setCommandClassControl(List<Short> commandClassControl) {
        this.commandClassControl = commandClassControl;
    }

    public List<Short> getPayload() {
        return new ArrayList<>();
    }

    public void setPayload(List<Short> payload) {
    }

    @Override
    public String toString() {
        return "SecurityCommandsSupportedReport(" +
                ')';
    }
}
