/**
 * Copyright (c) 2021 by the respective copyright holders.
 * All rights reserved.
 * <p>
 * This file is part of Parrot Home Automation Hub.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.parrotha.zwave.commands.alarmv2;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Note: This code is autogenerated, changes will be overwritten.
 */
public class AlarmReport extends com.parrotha.zwave.commands.alarmv1.AlarmReport {
    public static final Short ZWAVE_ALARM_TYPE_RESERVED0 = 0;
    public static final Short ZWAVE_ALARM_TYPE_SMOKE = 1;
    public static final Short ZWAVE_ALARM_TYPE_CO = 2;
    public static final Short ZWAVE_ALARM_TYPE_CO2 = 3;
    public static final Short ZWAVE_ALARM_TYPE_HEAT = 4;
    public static final Short ZWAVE_ALARM_TYPE_WATER = 5;
    public static final Short ZWAVE_ALARM_TYPE_ACCESS_CONTROL = 6;
    public static final Short ZWAVE_ALARM_TYPE_BURGLAR = 7;
    public static final Short ZWAVE_ALARM_TYPE_POWER_MANAGEMENT = 8;
    public static final Short ZWAVE_ALARM_TYPE_SYSTEM = 9;
    public static final Short ZWAVE_ALARM_TYPE_EMERGENCY = 10;
    public static final Short ZWAVE_ALARM_TYPE_CLOCK = 11;
    public static final Short ZWAVE_ALARM_TYPE_FIRST = 255;

    public String getCMD() {
        return "7105";
    }

    private Short alarmType = 0;
    private Short alarmLevel = 0;
    private Short zensorNetSourceNodeId = 0;
    private Short zwaveAlarmStatus = 0;
    private Short zwaveAlarmType = 0;
    private Short zwaveAlarmEvent = 0;
    private Short numberOfEventParameters = 0;
    private List<Short> eventParameter;

    public Short getAlarmType() {
        return alarmType;
    }

    public void setAlarmType(Short alarmType) {
        this.alarmType = alarmType;
    }

    public Short getAlarmLevel() {
        return alarmLevel;
    }

    public void setAlarmLevel(Short alarmLevel) {
        this.alarmLevel = alarmLevel;
    }

    public Short getZensorNetSourceNodeId() {
        return zensorNetSourceNodeId;
    }

    public void setZensorNetSourceNodeId(Short zensorNetSourceNodeId) {
        this.zensorNetSourceNodeId = zensorNetSourceNodeId;
    }

    public Short getZwaveAlarmStatus() {
        return zwaveAlarmStatus;
    }

    public void setZwaveAlarmStatus(Short zwaveAlarmStatus) {
        this.zwaveAlarmStatus = zwaveAlarmStatus;
    }

    public Short getZwaveAlarmType() {
        return zwaveAlarmType;
    }

    public void setZwaveAlarmType(Short zwaveAlarmType) {
        this.zwaveAlarmType = zwaveAlarmType;
    }

    public Short getZwaveAlarmEvent() {
        return zwaveAlarmEvent;
    }

    public void setZwaveAlarmEvent(Short zwaveAlarmEvent) {
        this.zwaveAlarmEvent = zwaveAlarmEvent;
    }

    public Short getNumberOfEventParameters() {
        return numberOfEventParameters;
    }

    public void setNumberOfEventParameters(Short numberOfEventParameters) {
        this.numberOfEventParameters = numberOfEventParameters;
    }

    public List<Short> getEventParameter() {
        return eventParameter;
    }

    public void setEventParameter(List<Short> eventParameter) {
        this.eventParameter = eventParameter;
    }

    public List<Short> getPayload() {
        List<Short> retList = Stream.of(alarmType, alarmLevel, zensorNetSourceNodeId, zwaveAlarmStatus, zwaveAlarmType, zwaveAlarmEvent, numberOfEventParameters).collect(Collectors.toList());
        retList.addAll(eventParameter);
        return retList;
    }

    public void setPayload(List<Short> payload) {
        if (payload == null) return;
        if (payload.size() > 0) {
            alarmType = payload.get(0);
        }
        if (payload.size() > 1) {
            alarmLevel = payload.get(1);
        }
        if (payload.size() > 2) {
            zensorNetSourceNodeId = payload.get(2);
        }
        if (payload.size() > 3) {
            zwaveAlarmStatus = payload.get(3);
        }
        if (payload.size() > 4) {
            zwaveAlarmType = payload.get(4);
        }
        if (payload.size() > 5) {
            zwaveAlarmEvent = payload.get(5);
        }
        if (payload.size() > 6) {
            numberOfEventParameters = payload.get(6);
        }
        if (payload.size() > 7) {
            eventParameter = payload.subList(7, (payload.size() - 1));
        }
    }

    @Override
    public String toString() {
        return "AlarmReport(" +
                "alarmType: " + alarmType +
                ", alarmLevel: " + alarmLevel +
                ", zensorNetSourceNodeId: " + zensorNetSourceNodeId +
                ", zwaveAlarmStatus: " + zwaveAlarmStatus +
                ", zwaveAlarmType: " + zwaveAlarmType +
                ", zwaveAlarmEvent: " + zwaveAlarmEvent +
                ", numberOfEventParameters: " + numberOfEventParameters +
                ", eventParameter: " + eventParameter +
                ')';
    }
}
