/**
 * Copyright (c) 2021-2023 by the respective copyright holders.
 * All rights reserved.
 * <p>
 * This file is part of Parrot Home Automation Hub.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.parrotha.zwave.commands.securityv1;

import com.parrotha.zwave.Command;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Note: This code is autogenerated, changes will be overwritten.
 */
public class SecurityMessageEncapsulation extends Command {
    public String getCMD() {
        return "9881";
    }

    private Boolean secondFrame = false;
    private Boolean sequenced = false;
    private Short sequenceCounter = 0;
    private Short commandClassIdentifier = 0;
    private Short commandIdentifier = 0;
    private List<Short> commandByte;

    public Boolean getSecondFrame() {
        return secondFrame;
    }

    public void setSecondFrame(Boolean secondFrame) {
        this.secondFrame = secondFrame;
    }

    public Boolean getSequenced() {
        return sequenced;
    }

    public void setSequenced(Boolean sequenced) {
        this.sequenced = sequenced;
    }

    public Short getSequenceCounter() {
        return sequenceCounter;
    }

    public void setSequenceCounter(Short sequenceCounter) {
        this.sequenceCounter = sequenceCounter;
    }

    public Short getCommandClassIdentifier() {
        return commandClassIdentifier;
    }

    public void setCommandClassIdentifier(Short commandClassIdentifier) {
        this.commandClassIdentifier = commandClassIdentifier;
    }

    public Short getCommandIdentifier() {
        return commandIdentifier;
    }

    public void setCommandIdentifier(Short commandIdentifier) {
        this.commandIdentifier = commandIdentifier;
    }

    public List<Short> getCommandByte() {
        return commandByte;
    }

    public void setCommandByte(List<Short> commandByte) {
        this.commandByte = commandByte;
    }

    public List<Short> getPayload() {
        Short data0 = (short) ((secondFrame == true ? (1 << 5) : 0) | 
                (sequenced == true ? (1 << 4) : 0) | 
                (sequenceCounter & 15));

        List<Short> retList = Stream.of(data0, commandClassIdentifier, commandIdentifier).collect(Collectors.toList());
        retList.addAll(commandByte);
        return retList;
    }

    public void setPayload(List<Short> payload) {
        if (payload == null) return;
        if (payload.size() > 0) {
            secondFrame = ((payload.get(0) >> 5) & 1) == 1;
            sequenced = ((payload.get(0) >> 4) & 1) == 1;
            sequenceCounter = (short) (payload.get(0) & 15);
        }
        if (payload.size() > 1) {
            commandClassIdentifier = payload.get(1);
        }
        if (payload.size() > 2) {
            commandIdentifier = payload.get(2);
        }
        if (payload.size() > 3) {
            commandByte = payload.subList(3, (payload.size() - 1));
        }
    }

    @Override
    public String toString() {
        return "SecurityMessageEncapsulation(" +
                "secondFrame: " + secondFrame +
                ", sequenced: " + sequenced +
                ", sequenceCounter: " + sequenceCounter +
                ", commandClassIdentifier: " + commandClassIdentifier +
                ", commandIdentifier: " + commandIdentifier +
                ", commandByte: " + commandByte +
                ')';
    }

    public SecurityMessageEncapsulation encapsulate(Command cmd) {
        this.commandIdentifier = cmd.getCommandIdentifier();
        this.commandClassIdentifier = cmd.getCommandClassIdentifier();
        this.commandByte = cmd.getPayload();
        return this;
    }
}
