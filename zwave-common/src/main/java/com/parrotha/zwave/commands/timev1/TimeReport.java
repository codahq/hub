/**
 * Copyright (c) 2021-2022 by the respective copyright holders.
 * All rights reserved.
 * <p>
 * This file is part of Parrot Home Automation Hub.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.parrotha.zwave.commands.timev1;

import com.parrotha.zwave.Command;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Note: This code is autogenerated, changes will be overwritten.
 */
public class TimeReport extends Command {
    public String getCMD() {
        return "8A02";
    }

    private Boolean rtcFailure = false;
    private Short hourLocalTime = 0;
    private Short minuteLocalTime = 0;
    private Short secondLocalTime = 0;

    public Boolean getRtcFailure() {
        return rtcFailure;
    }

    public void setRtcFailure(Boolean rtcFailure) {
        this.rtcFailure = rtcFailure;
    }

    public Short getHourLocalTime() {
        return hourLocalTime;
    }

    public void setHourLocalTime(Short hourLocalTime) {
        this.hourLocalTime = hourLocalTime;
    }

    public Short getMinuteLocalTime() {
        return minuteLocalTime;
    }

    public void setMinuteLocalTime(Short minuteLocalTime) {
        this.minuteLocalTime = minuteLocalTime;
    }

    public Short getSecondLocalTime() {
        return secondLocalTime;
    }

    public void setSecondLocalTime(Short secondLocalTime) {
        this.secondLocalTime = secondLocalTime;
    }

    public List<Short> getPayload() {
        Short data0 = (short) ((rtcFailure == true ? (1 << 7) : 0) | 
                (hourLocalTime & 15));

        return Stream.of(data0, minuteLocalTime, secondLocalTime).collect(Collectors.toList());
    }

    public void setPayload(List<Short> payload) {
        if (payload == null) return;
        if (payload.size() > 0) {
            rtcFailure = ((payload.get(0) >> 7) & 1) == 1;
            hourLocalTime = (short) (payload.get(0) & 15);
        }
        if (payload.size() > 1) {
            minuteLocalTime = payload.get(1);
        }
        if (payload.size() > 2) {
            secondLocalTime = payload.get(2);
        }
    }

    @Override
    public String toString() {
        return "TimeReport(" +
                "rtcFailure: " + rtcFailure +
                ", hourLocalTime: " + hourLocalTime +
                ", minuteLocalTime: " + minuteLocalTime +
                ", secondLocalTime: " + secondLocalTime +
                ')';
    }
}
