/**
 * Copyright (c) 2021-2022 by the respective copyright holders.
 * All rights reserved.
 * <p>
 * This file is part of Parrot Home Automation Hub.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.parrotha.zwave.commandclasses;

import com.parrotha.zwave.internal.BeanUtils;

import java.lang.reflect.InvocationTargetException;
import java.util.Map;

/**
 * Note: This code is autogenerated, changes will be overwritten.
 */
public class UserCodeV1 {
    public com.parrotha.zwave.commands.usercodev1.UserCodeSet userCodeSet() {
        return new com.parrotha.zwave.commands.usercodev1.UserCodeSet();
    }

    public com.parrotha.zwave.commands.usercodev1.UserCodeSet userCodeSet(Map values) throws InvocationTargetException, IllegalAccessException {
        com.parrotha.zwave.commands.usercodev1.UserCodeSet cmd = new com.parrotha.zwave.commands.usercodev1.UserCodeSet();
        BeanUtils.populate(cmd, values);
        return cmd;
    }

    public com.parrotha.zwave.commands.usercodev1.UserCodeGet userCodeGet() {
        return new com.parrotha.zwave.commands.usercodev1.UserCodeGet();
    }

    public com.parrotha.zwave.commands.usercodev1.UserCodeGet userCodeGet(Map values) throws InvocationTargetException, IllegalAccessException {
        com.parrotha.zwave.commands.usercodev1.UserCodeGet cmd = new com.parrotha.zwave.commands.usercodev1.UserCodeGet();
        BeanUtils.populate(cmd, values);
        return cmd;
    }

    public com.parrotha.zwave.commands.usercodev1.UserCodeReport userCodeReport() {
        return new com.parrotha.zwave.commands.usercodev1.UserCodeReport();
    }

    public com.parrotha.zwave.commands.usercodev1.UserCodeReport userCodeReport(Map values) throws InvocationTargetException, IllegalAccessException {
        com.parrotha.zwave.commands.usercodev1.UserCodeReport cmd = new com.parrotha.zwave.commands.usercodev1.UserCodeReport();
        BeanUtils.populate(cmd, values);
        return cmd;
    }

    public com.parrotha.zwave.commands.usercodev1.UsersNumberGet usersNumberGet() {
        return new com.parrotha.zwave.commands.usercodev1.UsersNumberGet();
    }

    public com.parrotha.zwave.commands.usercodev1.UsersNumberGet usersNumberGet(Map values) throws InvocationTargetException, IllegalAccessException {
        com.parrotha.zwave.commands.usercodev1.UsersNumberGet cmd = new com.parrotha.zwave.commands.usercodev1.UsersNumberGet();
        BeanUtils.populate(cmd, values);
        return cmd;
    }

    public com.parrotha.zwave.commands.usercodev1.UsersNumberReport usersNumberReport() {
        return new com.parrotha.zwave.commands.usercodev1.UsersNumberReport();
    }

    public com.parrotha.zwave.commands.usercodev1.UsersNumberReport usersNumberReport(Map values) throws InvocationTargetException, IllegalAccessException {
        com.parrotha.zwave.commands.usercodev1.UsersNumberReport cmd = new com.parrotha.zwave.commands.usercodev1.UsersNumberReport();
        BeanUtils.populate(cmd, values);
        return cmd;
    }

}
